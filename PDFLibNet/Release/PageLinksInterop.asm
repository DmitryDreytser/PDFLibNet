; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\projects\PDFLibNet\libAFPDFLib\PageLinksInterop.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat


PUBLIC	?getLink@Links@@QAEPAVLink@@H@Z			; Links::getLink
PUBLIC	?getNumLinks@Links@@QAEHXZ			; Links::getNumLinks
PUBLIC	??_C@_0BB@DJDNOLIL@New?5LinkInterop?6?$AA@	; `string'
EXTRN	__imp____iob_func:PROC
EXTRN	__imp__fprintf:PROC
;	COMDAT ??_C@_0BB@DJDNOLIL@New?5LinkInterop?6?$AA@
CONST	SEGMENT
??_C@_0BB@DJDNOLIL@New?5LinkInterop?6?$AA@ DB 'New LinkInterop', 0aH, 00H ; `string'
	ORG $+20332
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
PUBLIC	?setPointers@PageLinksInterop@@QAEXHH@Z		; PageLinksInterop::setPointers
; Function compile flags: /Ogtpy
; File c:\projects\pdflibnet\libafpdflib\pagelinksinterop.cpp
;	COMDAT ?setPointers@PageLinksInterop@@QAEXHH@Z
_TEXT	SEGMENT
?setPointers@PageLinksInterop@@QAEXHH@Z PROC		; PageLinksInterop::setPointers, COMDAT
; _this$ = eax
; _lptr$ = edx
; _pdfdoc$ = ecx

; 40   : 	_pdfDoc=(AFPDFDocInterop *)pdfdoc;

	mov	DWORD PTR [eax+4], ecx

; 41   : 	_links =(void *)lptr;

	mov	DWORD PTR [eax], edx

; 42   : 	
; 43   : //	free(_cache);
; 44   : //	_cache=malloc(this->getLinkCount()*sizeof(LinkInterop));
; 45   : //	memset(_cache,0,this->getLinkCount()*sizeof(LinkInterop));
; 46   : }

	ret	0
?setPointers@PageLinksInterop@@QAEXHH@Z ENDP		; PageLinksInterop::setPointers
_TEXT	ENDS
PUBLIC	??1PageLinksInterop@@QAE@XZ			; PageLinksInterop::~PageLinksInterop
; Function compile flags: /Ogtpy
;	COMDAT ??1PageLinksInterop@@QAE@XZ
_TEXT	SEGMENT
??1PageLinksInterop@@QAE@XZ PROC			; PageLinksInterop::~PageLinksInterop, COMDAT

; 17   : 	//free(_cache);
; 18   : }

	ret	0
??1PageLinksInterop@@QAE@XZ ENDP			; PageLinksInterop::~PageLinksInterop
_TEXT	ENDS
PUBLIC	??0PageLinksInterop@@QAE@PAXPAVAFPDFDocInterop@@@Z ; PageLinksInterop::PageLinksInterop
; Function compile flags: /Ogtpy
;	COMDAT ??0PageLinksInterop@@QAE@PAXPAVAFPDFDocInterop@@@Z
_TEXT	SEGMENT
??0PageLinksInterop@@QAE@PAXPAVAFPDFDocInterop@@@Z PROC	; PageLinksInterop::PageLinksInterop, COMDAT
; _this$ = eax
; _lptr$ = ecx
; _pdfdoc$ = edx

; 10   : {

	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], 0

; 11   : 	//_cache=malloc(this->getLinkCount()*sizeof(LinkInterop));
; 12   : 	//memset(_cache,0,this->getLinkCount()*sizeof(LinkInterop));
; 13   : }

	ret	0
??0PageLinksInterop@@QAE@PAXPAVAFPDFDocInterop@@@Z ENDP	; PageLinksInterop::PageLinksInterop
; Function compile flags: /Ogtpy
; File c:\projects\pdflibnet\xpdfwin\xpdf\link.h
_TEXT	ENDS
;	COMDAT ?getLink@Links@@QAEPAVLink@@H@Z
_TEXT	SEGMENT
?getLink@Links@@QAEPAVLink@@H@Z PROC			; Links::getLink, COMDAT
; _this$ = eax
; _i$ = edx

; 354  :   Link *getLink(int i) { return links[i]; }

	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+edx*4]
	ret	0
?getLink@Links@@QAEPAVLink@@H@Z ENDP			; Links::getLink
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?getNumLinks@Links@@QAEHXZ
_TEXT	SEGMENT
?getNumLinks@Links@@QAEHXZ PROC				; Links::getNumLinks, COMDAT
; _this$ = eax

; 353  :   int getNumLinks() { return numLinks; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?getNumLinks@Links@@QAEHXZ ENDP				; Links::getNumLinks
PUBLIC	?onLink@PageLinksInterop@@QAE_NNN@Z		; PageLinksInterop::onLink
; Function compile flags: /Ogtpy
; File c:\projects\pdflibnet\libafpdflib\pagelinksinterop.cpp
;	COMDAT ?onLink@PageLinksInterop@@QAE_NNN@Z
_TEXT	SEGMENT
_x$ = 8							; size = 8
_y$ = 16						; size = 8
?onLink@PageLinksInterop@@QAE_NNN@Z PROC		; PageLinksInterop::onLink, COMDAT
; _this$ = eax

; 34   : 	if(_links)

	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@onLink

; 35   : 		return ((Links *)_links)->onLink(x,y)?true:false;

	fld	QWORD PTR _y$[esp-4]
	sub	esp, 16					; 00000010H
	fstp	QWORD PTR [esp+8]
	fld	QWORD PTR _x$[esp+12]
	fstp	QWORD PTR [esp]
	call	?onLink@Links@@QAEHNN@Z			; Links::onLink
	test	eax, eax
	setne	al

; 37   : }

	ret	16					; 00000010H
$LN1@onLink:

; 36   : 	return false;

	xor	al, al

; 37   : }

	ret	16					; 00000010H
?onLink@PageLinksInterop@@QAE_NNN@Z ENDP		; PageLinksInterop::onLink
_TEXT	ENDS
PUBLIC	?getLinkCount@PageLinksInterop@@QAEHXZ		; PageLinksInterop::getLinkCount
; Function compile flags: /Ogtpy
;	COMDAT ?getLinkCount@PageLinksInterop@@QAEHXZ
_TEXT	SEGMENT
?getLinkCount@PageLinksInterop@@QAEHXZ PROC		; PageLinksInterop::getLinkCount, COMDAT
; _this$ = ecx

; 29   : 	if(_links)

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN1@getLinkCou

; 30   : 		return ((Links *)_links)->getNumLinks();

	mov	eax, DWORD PTR [eax+4]

; 32   : }

	ret	0
$LN1@getLinkCou:

; 31   : 	return 0;

	xor	eax, eax

; 32   : }

	ret	0
?getLinkCount@PageLinksInterop@@QAEHXZ ENDP		; PageLinksInterop::getLinkCount
_TEXT	ENDS
PUBLIC	?getLink@PageLinksInterop@@QAEPAVLinkInterop@@H@Z ; PageLinksInterop::getLink
; Function compile flags: /Ogtpy
;	COMDAT ?getLink@PageLinksInterop@@QAEPAVLinkInterop@@H@Z
_TEXT	SEGMENT
_iLink$ = 8						; size = 4
?getLink@PageLinksInterop@@QAEPAVLinkInterop@@H@Z PROC	; PageLinksInterop::getLink, COMDAT
; _this$ = ecx

; 20   : LinkInterop *PageLinksInterop::getLink(int iLink){

	push	esi
	push	edi

; 21   : 	if(iLink>=0 && iLink<this->getLinkCount() && _links){

	mov	edi, DWORD PTR _iLink$[esp+4]
	mov	esi, ecx
	test	edi, edi
	jl	SHORT $LN1@getLink
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN7@getLink
	mov	ecx, DWORD PTR [eax+4]
	jmp	SHORT $LN8@getLink
$LN7@getLink:
	xor	ecx, ecx
$LN8@getLink:
	cmp	edi, ecx
	jge	SHORT $LN1@getLink
	test	eax, eax
	je	SHORT $LN1@getLink

; 22   : 		fprintf(stderr,"New LinkInterop\n");

	push	OFFSET ??_C@_0BB@DJDNOLIL@New?5LinkInterop?6?$AA@
	call	DWORD PTR __imp____iob_func
	add	eax, 64					; 00000040H
	push	eax
	call	DWORD PTR __imp__fprintf

; 23   : 		LinkInterop *l=new LinkInterop(((Links *)_links)->getLink(iLink),_pdfDoc);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@getLink
	mov	edx, DWORD PTR [esi]
	mov	edx, DWORD PTR [edx]
	mov	edx, DWORD PTR [edx+edi*4]
	mov	ecx, DWORD PTR [esi+4]
	pop	edi
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], 0
	pop	esi

; 27   : }

	ret	4
$LN1@getLink:
	pop	edi

; 24   : 		return l;
; 25   : 	}
; 26   : 	return 0;

	xor	eax, eax
	pop	esi

; 27   : }

	ret	4
?getLink@PageLinksInterop@@QAEPAVLinkInterop@@H@Z ENDP	; PageLinksInterop::getLink
END
