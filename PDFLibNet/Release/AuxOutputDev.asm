; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\projects\PDFLibNet\libAFPDFLib\AuxOutputDev.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat


PUBLIC	?cvtUserToDev@AuxOutputDev@@UAEXNNPAH0@Z	; AuxOutputDev::cvtUserToDev
PUBLIC	?cvtDevToUser@AuxOutputDev@@UAEXNNPAN0@Z	; AuxOutputDev::cvtDevToUser
PUBLIC	??_R4AuxOutputDev@@6B@				; AuxOutputDev::`RTTI Complete Object Locator'
PUBLIC	??_R3AuxOutputDev@@8				; AuxOutputDev::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AuxOutputDev@@8				; AuxOutputDev::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@AuxOutputDev@@8			; AuxOutputDev::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVAuxOutputDev@@@8			; AuxOutputDev `RTTI Type Descriptor'
PUBLIC	??_7AuxOutputDev@@6B@				; AuxOutputDev::`vftable'
;	COMDAT ??_7AuxOutputDev@@6B@
CONST	SEGMENT
??_7AuxOutputDev@@6B@ DD FLAT:??_R4AuxOutputDev@@6B@	; AuxOutputDev::`vftable'
	DD	FLAT:?cvtDevToUser@AuxOutputDev@@UAEXNNPAN0@Z
	DD	FLAT:?cvtUserToDev@AuxOutputDev@@UAEXNNPAH0@Z
CONST	ENDS
;	COMDAT ??_R4AuxOutputDev@@6B@
rdata$r	SEGMENT
??_R4AuxOutputDev@@6B@ DD 00H				; AuxOutputDev::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVAuxOutputDev@@@8
	DD	FLAT:??_R3AuxOutputDev@@8
rdata$r	ENDS
;	COMDAT ??_R3AuxOutputDev@@8
rdata$r	SEGMENT
??_R3AuxOutputDev@@8 DD 00H				; AuxOutputDev::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2AuxOutputDev@@8
rdata$r	ENDS
;	COMDAT ??_R2AuxOutputDev@@8
rdata$r	SEGMENT
??_R2AuxOutputDev@@8 DD FLAT:??_R1A@?0A@EA@AuxOutputDev@@8 ; AuxOutputDev::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AuxOutputDev@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AuxOutputDev@@8 DD FLAT:??_R0?AVAuxOutputDev@@@8 ; AuxOutputDev::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AuxOutputDev@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAuxOutputDev@@@8
_DATA	SEGMENT
??_R0?AVAuxOutputDev@@@8 DD FLAT:??_7type_info@@6B@	; AuxOutputDev `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAuxOutputDev@@', 00H
	ORG $+3780
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
PUBLIC	?startDoc@AuxOutputDev@@QAEXPAUpdf_xref_s@@@Z	; AuxOutputDev::startDoc
; Function compile flags: /Ogtpy
; File c:\projects\pdflibnet\libafpdflib\auxoutputdev.cpp
;	COMDAT ?startDoc@AuxOutputDev@@QAEXPAUpdf_xref_s@@@Z
_TEXT	SEGMENT
?startDoc@AuxOutputDev@@QAEXPAUpdf_xref_s@@@Z PROC	; AuxOutputDev::startDoc, COMDAT

; 68   : {}

	ret	0
?startDoc@AuxOutputDev@@QAEXPAUpdf_xref_s@@@Z ENDP	; AuxOutputDev::startDoc
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?cvtUserToDev@AuxOutputDev@@UAEXNNPAH0@Z
_TEXT	SEGMENT
_ux$ = 8						; size = 8
_uy$ = 16						; size = 8
_dx$ = 24						; size = 4
_dy$ = 28						; size = 4
?cvtUserToDev@AuxOutputDev@@UAEXNNPAH0@Z PROC		; AuxOutputDev::cvtUserToDev, COMDAT
; _this$ = ecx

; 60   : void AuxOutputDev::cvtUserToDev(double ux, double uy, int *dx, int *dy){

	push	esi
	mov	esi, ecx

; 61   : 	*dx = (int)(_ctm[0] * ux + _ctm[2] * uy + _ctm[4] + 0.5);

	mov	eax, DWORD PTR [esi+16]
	fld	QWORD PTR [eax+16]
	fld	QWORD PTR _uy$[esp]
	fmul	ST(1), ST(0)
	fld	QWORD PTR [eax]
	fld	QWORD PTR _ux$[esp]
	fmul	ST(1), ST(0)
	fxch	ST(3)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR [eax+32]
	fld	QWORD PTR __real@3fe0000000000000
	fadd	ST(1), ST(0)
	fxch	ST(1)
	call	__ftol2_sse
	mov	ecx, DWORD PTR _dx$[esp]
	mov	DWORD PTR [ecx], eax

; 62   : 	*dy = (int)(_ctm[1] * ux + _ctm[3] * uy + _ctm[5] + 0.5);

	mov	eax, DWORD PTR [esi+16]
	fld	QWORD PTR [eax+8]
	fmulp	ST(3), ST(0)
	fld	QWORD PTR [eax+24]
	fmulp	ST(2), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR [eax+40]
	faddp	ST(1), ST(0)
	call	__ftol2_sse
	mov	edx, DWORD PTR _dy$[esp]
	mov	DWORD PTR [edx], eax
	pop	esi

; 63   : }

	ret	24					; 00000018H
?cvtUserToDev@AuxOutputDev@@UAEXNNPAH0@Z ENDP		; AuxOutputDev::cvtUserToDev
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?cvtDevToUser@AuxOutputDev@@UAEXNNPAN0@Z
_TEXT	SEGMENT
_dx$ = 8						; size = 8
_dy$ = 16						; size = 8
_ux$ = 24						; size = 4
_uy$ = 28						; size = 4
?cvtDevToUser@AuxOutputDev@@UAEXNNPAN0@Z PROC		; AuxOutputDev::cvtDevToUser, COMDAT
; _this$ = ecx

; 57   : 	*ux = _ictm[0] * dx + _ictm[2] * dy + _ictm[4];

	mov	eax, DWORD PTR [ecx+20]
	fld	QWORD PTR [eax+16]
	mov	ecx, DWORD PTR _ux$[esp-4]
	fld	QWORD PTR _dy$[esp-4]

; 58   : 	*uy = _ictm[1] * dx + _ictm[3] * dy + _ictm[5];

	mov	edx, DWORD PTR _uy$[esp-4]
	fmul	ST(1), ST(0)
	fld	QWORD PTR [eax]
	fld	QWORD PTR _dx$[esp-4]
	fmul	ST(1), ST(0)
	fxch	ST(3)
	faddp	ST(1), ST(0)
	fadd	QWORD PTR [eax+32]
	fstp	QWORD PTR [ecx]
	fld	QWORD PTR [eax+8]
	fmulp	ST(2), ST(0)
	fmul	QWORD PTR [eax+24]
	faddp	ST(1), ST(0)
	fadd	QWORD PTR [eax+40]
	fstp	QWORD PTR [edx]

; 59   : }

	ret	24					; 00000018H
?cvtDevToUser@AuxOutputDev@@UAEXNNPAN0@Z ENDP		; AuxOutputDev::cvtDevToUser
_TEXT	ENDS
PUBLIC	?setVectorAntialias@AuxOutputDev@@QAEXH@Z	; AuxOutputDev::setVectorAntialias
; Function compile flags: /Ogtpy
;	COMDAT ?setVectorAntialias@AuxOutputDev@@QAEXH@Z
_TEXT	SEGMENT
_antialias$ = 8						; size = 4
?setVectorAntialias@AuxOutputDev@@QAEXH@Z PROC		; AuxOutputDev::setVectorAntialias, COMDAT
; _this$ = eax

; 53   : void AuxOutputDev::setVectorAntialias(GBool antialias){ _splash->setVectorAntialias(antialias);}

	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	edx, DWORD PTR [edx+316]
	jmp	edx
?setVectorAntialias@AuxOutputDev@@QAEXH@Z ENDP		; AuxOutputDev::setVectorAntialias
_TEXT	ENDS
PUBLIC	?getSplash@AuxOutputDev@@QAEPAVSplashOutputDev@@XZ ; AuxOutputDev::getSplash
; Function compile flags: /Ogtpy
;	COMDAT ?getSplash@AuxOutputDev@@QAEPAVSplashOutputDev@@XZ
_TEXT	SEGMENT
?getSplash@AuxOutputDev@@QAEPAVSplashOutputDev@@XZ PROC	; AuxOutputDev::getSplash, COMDAT
; _this$ = eax

; 50   : SplashOutputDev *AuxOutputDev::getSplash(){ return _splash; }

	mov	eax, DWORD PTR [eax+12]
	ret	0
?getSplash@AuxOutputDev@@QAEPAVSplashOutputDev@@XZ ENDP	; AuxOutputDev::getSplash
_TEXT	ENDS
PUBLIC	?GetHeight@AuxOutputDev@@QAENXZ			; AuxOutputDev::GetHeight
; Function compile flags: /Ogtpy
;	COMDAT ?GetHeight@AuxOutputDev@@QAENXZ
_TEXT	SEGMENT
?GetHeight@AuxOutputDev@@QAENXZ PROC			; AuxOutputDev::GetHeight, COMDAT
; _this$ = eax

; 47   : double AuxOutputDev::GetHeight(){return _height; }

	fld	QWORD PTR [eax+32]
	ret	0
?GetHeight@AuxOutputDev@@QAENXZ ENDP			; AuxOutputDev::GetHeight
_TEXT	ENDS
PUBLIC	?GetWidth@AuxOutputDev@@QAENXZ			; AuxOutputDev::GetWidth
; Function compile flags: /Ogtpy
;	COMDAT ?GetWidth@AuxOutputDev@@QAENXZ
_TEXT	SEGMENT
?GetWidth@AuxOutputDev@@QAENXZ PROC			; AuxOutputDev::GetWidth, COMDAT
; _this$ = eax

; 46   : double AuxOutputDev::GetWidth(){ return _width; } 

	fld	QWORD PTR [eax+24]
	ret	0
?GetWidth@AuxOutputDev@@QAENXZ ENDP			; AuxOutputDev::GetWidth
_TEXT	ENDS
PUBLIC	?setModRegion@AuxOutputDev@@QAEXHHHH@Z		; AuxOutputDev::setModRegion
; Function compile flags: /Ogtpy
;	COMDAT ?setModRegion@AuxOutputDev@@QAEXHHHH@Z
_TEXT	SEGMENT
?setModRegion@AuxOutputDev@@QAEXHHHH@Z PROC		; AuxOutputDev::setModRegion, COMDAT

; 42   : 
; 43   : }

	ret	0
?setModRegion@AuxOutputDev@@QAEXHHHH@Z ENDP		; AuxOutputDev::setModRegion
_TEXT	ENDS
PUBLIC	?setDefICTM@AuxOutputDev@@QAEXPAN@Z		; AuxOutputDev::setDefICTM
; Function compile flags: /Ogtpy
;	COMDAT ?setDefICTM@AuxOutputDev@@QAEXPAN@Z
_TEXT	SEGMENT
?setDefICTM@AuxOutputDev@@QAEXPAN@Z PROC		; AuxOutputDev::setDefICTM, COMDAT
; _this$ = eax
; _ictm$ = ecx

; 36   : void AuxOutputDev::setDefICTM(double *ictm){ _ictm=ictm; }

	mov	DWORD PTR [eax+20], ecx
	ret	0
?setDefICTM@AuxOutputDev@@QAEXPAN@Z ENDP		; AuxOutputDev::setDefICTM
_TEXT	ENDS
PUBLIC	?setDefCTM@AuxOutputDev@@QAEXPAN@Z		; AuxOutputDev::setDefCTM
; Function compile flags: /Ogtpy
;	COMDAT ?setDefCTM@AuxOutputDev@@QAEXPAN@Z
_TEXT	SEGMENT
?setDefCTM@AuxOutputDev@@QAEXPAN@Z PROC			; AuxOutputDev::setDefCTM, COMDAT
; _this$ = eax
; _ctm$ = ecx

; 35   : void AuxOutputDev::setDefCTM(double *ctm){ _ctm =ctm; }

	mov	DWORD PTR [eax+16], ecx
	ret	0
?setDefCTM@AuxOutputDev@@QAEXPAN@Z ENDP			; AuxOutputDev::setDefCTM
_TEXT	ENDS
PUBLIC	?getDefICTM@AuxOutputDev@@QAEPANXZ		; AuxOutputDev::getDefICTM
; Function compile flags: /Ogtpy
;	COMDAT ?getDefICTM@AuxOutputDev@@QAEPANXZ
_TEXT	SEGMENT
?getDefICTM@AuxOutputDev@@QAEPANXZ PROC			; AuxOutputDev::getDefICTM, COMDAT
; _this$ = eax

; 34   : double *AuxOutputDev::getDefICTM() { return _ictm;}

	mov	eax, DWORD PTR [eax+20]
	ret	0
?getDefICTM@AuxOutputDev@@QAEPANXZ ENDP			; AuxOutputDev::getDefICTM
_TEXT	ENDS
PUBLIC	?getDefCTM@AuxOutputDev@@QAEPANXZ		; AuxOutputDev::getDefCTM
; Function compile flags: /Ogtpy
;	COMDAT ?getDefCTM@AuxOutputDev@@QAEPANXZ
_TEXT	SEGMENT
?getDefCTM@AuxOutputDev@@QAEPANXZ PROC			; AuxOutputDev::getDefCTM, COMDAT
; _this$ = eax

; 33   : double *AuxOutputDev::getDefCTM() {	return _ctm;}

	mov	eax, DWORD PTR [eax+16]
	ret	0
?getDefCTM@AuxOutputDev@@QAEPANXZ ENDP			; AuxOutputDev::getDefCTM
_TEXT	ENDS
PUBLIC	?SetDataPtr@AuxOutputDev@@QAEXPAX@Z		; AuxOutputDev::SetDataPtr
; Function compile flags: /Ogtpy
;	COMDAT ?SetDataPtr@AuxOutputDev@@QAEXPAX@Z
_TEXT	SEGMENT
?SetDataPtr@AuxOutputDev@@QAEXPAX@Z PROC		; AuxOutputDev::SetDataPtr, COMDAT
; _this$ = eax
; _data$ = ecx

; 32   : void AuxOutputDev::SetDataPtr(void *data){	_data_ptr = data;}

	mov	DWORD PTR [eax+8], ecx
	ret	0
?SetDataPtr@AuxOutputDev@@QAEXPAX@Z ENDP		; AuxOutputDev::SetDataPtr
_TEXT	ENDS
PUBLIC	?GetDataPtr@AuxOutputDev@@QAEPAXXZ		; AuxOutputDev::GetDataPtr
; Function compile flags: /Ogtpy
;	COMDAT ?GetDataPtr@AuxOutputDev@@QAEPAXXZ
_TEXT	SEGMENT
?GetDataPtr@AuxOutputDev@@QAEPAXXZ PROC			; AuxOutputDev::GetDataPtr, COMDAT
; _this$ = eax

; 31   : void *AuxOutputDev::GetDataPtr(){	return _data_ptr;}

	mov	eax, DWORD PTR [eax+8]
	ret	0
?GetDataPtr@AuxOutputDev@@QAEPAXXZ ENDP			; AuxOutputDev::GetDataPtr
_TEXT	ENDS
PUBLIC	??0AuxOutputDev@@QAE@PAVSplashOutputDev@@@Z	; AuxOutputDev::AuxOutputDev
; Function compile flags: /Ogtpy
;	COMDAT ??0AuxOutputDev@@QAE@PAVSplashOutputDev@@@Z
_TEXT	SEGMENT
??0AuxOutputDev@@QAE@PAVSplashOutputDev@@@Z PROC	; AuxOutputDev::AuxOutputDev, COMDAT
; _this$ = eax
; _splash$ = edx

; 14   : {

	fldz
	xor	ecx, ecx
	fst	QWORD PTR [eax+24]
	mov	DWORD PTR [eax], OFFSET ??_7AuxOutputDev@@6B@
	fstp	QWORD PTR [eax+32]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	mov	BYTE PTR [eax+40], 1
	mov	DWORD PTR [eax+44], ecx

; 15   : }

	ret	0
??0AuxOutputDev@@QAE@PAVSplashOutputDev@@@Z ENDP	; AuxOutputDev::AuxOutputDev
PUBLIC	??1AuxOutputDev@@QAE@XZ				; AuxOutputDev::~AuxOutputDev
; Function compile flags: /Ogtpy
;	COMDAT ??1AuxOutputDev@@QAE@XZ
_TEXT	SEGMENT
??1AuxOutputDev@@QAE@XZ PROC				; AuxOutputDev::~AuxOutputDev, COMDAT
; _this$ = esi

; 19   : #ifdef _MUPDF
; 20   : 	if(_pixmap!=NULL){

	mov	eax, DWORD PTR [esi+44]
	mov	DWORD PTR [esi], OFFSET ??_7AuxOutputDev@@6B@
	test	eax, eax
	je	SHORT $LN2@AuxOutputD

; 21   : 		::fz_droppixmap(_pixmap);

	push	eax
	call	_fz_droppixmap
	add	esp, 4

; 22   : 		_pixmap=NULL;

	mov	DWORD PTR [esi+44], 0
$LN2@AuxOutputD:

; 23   : 	}
; 24   : #endif
; 25   : 	if(_splash!=NULL){

	mov	ecx, DWORD PTR [esi+12]
	test	ecx, ecx
	je	SHORT $LN1@AuxOutputD

; 26   : 		delete _splash;

	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax]
	push	1
	call	edx

; 27   : 		_splash=NULL;

	mov	DWORD PTR [esi+12], 0
$LN1@AuxOutputD:

; 28   : 	}
; 29   : }

	ret	0
??1AuxOutputDev@@QAE@XZ ENDP				; AuxOutputDev::~AuxOutputDev
PUBLIC	?clearModRegion@AuxOutputDev@@QAEXXZ		; AuxOutputDev::clearModRegion
; Function compile flags: /Ogtpy
;	COMDAT ?clearModRegion@AuxOutputDev@@QAEXXZ
_TEXT	SEGMENT
?clearModRegion@AuxOutputDev@@QAEXXZ PROC		; AuxOutputDev::clearModRegion, COMDAT
; _this$ = eax

; 52   : void AuxOutputDev::clearModRegion(){ _splash->clearModRegion(); }

	mov	ecx, DWORD PTR [eax+12]
	jmp	?clearModRegion@SplashOutputDev@@QAEXXZ	; SplashOutputDev::clearModRegion
?clearModRegion@AuxOutputDev@@QAEXXZ ENDP		; AuxOutputDev::clearModRegion
_TEXT	ENDS
PUBLIC	?getModRegion@AuxOutputDev@@QAEXPAH000@Z	; AuxOutputDev::getModRegion
; Function compile flags: /Ogtpy
;	COMDAT ?getModRegion@AuxOutputDev@@QAEXPAH000@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_xMin$ = 12						; size = 4
?getModRegion@AuxOutputDev@@QAEXPAH000@Z PROC		; AuxOutputDev::getModRegion, COMDAT
; _yMin$ = edx
; _xMax$ = ecx
; _yMax$ = eax

; 39   : 	_splash->getModRegion(xMin,yMin,xMax,yMax);

	push	eax
	mov	eax, DWORD PTR _xMin$[esp]
	push	ecx
	mov	ecx, DWORD PTR _this$[esp+4]
	mov	ecx, DWORD PTR [ecx+12]
	push	edx
	push	eax
	call	?getModRegion@SplashOutputDev@@QAEXPAH000@Z ; SplashOutputDev::getModRegion

; 40   : }

	ret	8
?getModRegion@AuxOutputDev@@QAEXPAH000@Z ENDP		; AuxOutputDev::getModRegion
PUBLIC	?startDoc@AuxOutputDev@@QAEXPAVXRef@@@Z		; AuxOutputDev::startDoc
; Function compile flags: /Ogtpy
;	COMDAT ?startDoc@AuxOutputDev@@QAEXPAVXRef@@@Z
_TEXT	SEGMENT
?startDoc@AuxOutputDev@@QAEXPAVXRef@@@Z PROC		; AuxOutputDev::startDoc, COMDAT
; _this$ = ecx
; _xrefA$ = eax

; 51   : void AuxOutputDev::startDoc(XRef *xrefA){ _splash->startDoc(xrefA); }

	mov	ecx, DWORD PTR [ecx+12]
	push	eax
	call	?startDoc@SplashOutputDev@@QAEXPAVXRef@@@Z ; SplashOutputDev::startDoc
	ret	0
?startDoc@AuxOutputDev@@QAEXPAVXRef@@@Z ENDP		; AuxOutputDev::startDoc
END
