; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	c:\projects\etc\PDFLibNet\libAFPDFLib\LinkInterop.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat


PUBLIC	??_GLinkActionInterop@@QAEPAXI@Z		; LinkActionInterop::`scalar deleting destructor'
PUBLIC	?getRect@Link@@QAEXPAN000@Z			; Link::getRect
PUBLIC	?getAction@Link@@QAEPAVLinkAction@@XZ		; Link::getAction
PUBLIC	?getURI@LinkURI@@QAEPAVGString@@XZ		; LinkURI::getURI
PUBLIC	?isOk@Link@@QAEHXZ				; Link::isOk
PUBLIC	??_GLinkDestInterop@@QAEPAXI@Z			; LinkDestInterop::`scalar deleting destructor'
	ORG $+452
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
PUBLIC	??0LinkActionInterop@@QAE@PAX0PAVAFPDFDocInterop@@@Z ; LinkActionInterop::LinkActionInterop
; Function compile flags: /Ogtpy
; File c:\projects\etc\pdflibnet\libafpdflib\linkinterop.cpp
;	COMDAT ??0LinkActionInterop@@QAE@PAX0PAVAFPDFDocInterop@@@Z
_TEXT	SEGMENT
_pdfdoc$ = 8						; size = 4
??0LinkActionInterop@@QAE@PAX0PAVAFPDFDocInterop@@@Z PROC ; LinkActionInterop::LinkActionInterop, COMDAT
; _this$ = eax
; _link$ = ecx
; _action$ = edx

; 107  : {

	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR _pdfdoc$[esp-4]
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], 0

; 108  : 
; 109  : }

	ret	4
??0LinkActionInterop@@QAE@PAX0PAVAFPDFDocInterop@@@Z ENDP ; LinkActionInterop::LinkActionInterop
_TEXT	ENDS
PUBLIC	??0LinkInterop@@QAE@PAXPAVAFPDFDocInterop@@@Z	; LinkInterop::LinkInterop
; Function compile flags: /Ogtpy
;	COMDAT ??0LinkInterop@@QAE@PAXPAVAFPDFDocInterop@@@Z
_TEXT	SEGMENT
??0LinkInterop@@QAE@PAXPAVAFPDFDocInterop@@@Z PROC	; LinkInterop::LinkInterop, COMDAT
; _this$ = eax
; _ptr$ = ecx
; _pdfdoc$ = edx

; 9    : {

	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], 0

; 10   : 	
; 11   : }

	ret	0
??0LinkInterop@@QAE@PAXPAVAFPDFDocInterop@@@Z ENDP	; LinkInterop::LinkInterop
; Function compile flags: /Ogtpy
; File c:\projects\etc\pdflibnet\xpdfwin\xpdf\link.h
_TEXT	ENDS
;	COMDAT ?getRect@Link@@QAEXPAN000@Z
_TEXT	SEGMENT
_xa2$ = 8						; size = 4
_ya2$ = 12						; size = 4
?getRect@Link@@QAEXPAN000@Z PROC			; Link::getRect, COMDAT
; _this$ = eax
; _xa1$ = ecx
; _ya1$ = edx

; 329  :     { *xa1 = x1; *ya1 = y1; *xa2 = x2; *ya2 = y2; }

	fld	QWORD PTR [eax]
	fstp	QWORD PTR [ecx]
	mov	ecx, DWORD PTR _xa2$[esp-4]
	fld	QWORD PTR [eax+8]
	fstp	QWORD PTR [edx]
	mov	edx, DWORD PTR _ya2$[esp-4]
	fld	QWORD PTR [eax+16]
	fstp	QWORD PTR [ecx]
	fld	QWORD PTR [eax+24]
	fstp	QWORD PTR [edx]
	ret	8
?getRect@Link@@QAEXPAN000@Z ENDP			; Link::getRect
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?getAction@Link@@QAEPAVLinkAction@@XZ
_TEXT	SEGMENT
?getAction@Link@@QAEPAVLinkAction@@XZ PROC		; Link::getAction, COMDAT
; _this$ = eax

; 325  :   LinkAction *getAction() { return action; }

	mov	eax, DWORD PTR [eax+32]
	ret	0
?getAction@Link@@QAEPAVLinkAction@@XZ ENDP		; Link::getAction
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?isOk@Link@@QAEHXZ
_TEXT	SEGMENT
?isOk@Link@@QAEHXZ PROC					; Link::isOk, COMDAT
; _this$ = eax

; 318  :   GBool isOk() { return ok; }

	mov	eax, DWORD PTR [eax+36]
	ret	0
?isOk@Link@@QAEHXZ ENDP					; Link::isOk
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?getURI@LinkURI@@QAEPAVGString@@XZ
_TEXT	SEGMENT
?getURI@LinkURI@@QAEPAVGString@@XZ PROC			; LinkURI::getURI, COMDAT
; _this$ = eax

; 226  :   GString *getURI() { return uri; }

	mov	eax, DWORD PTR [eax+4]
	ret	0
?getURI@LinkURI@@QAEPAVGString@@XZ ENDP			; LinkURI::getURI
; Function compile flags: /Ogtpy
;	COMDAT ??_GLinkDestInterop@@QAEPAXI@Z
_TEXT	SEGMENT
??_GLinkDestInterop@@QAEPAXI@Z PROC			; LinkDestInterop::`scalar deleting destructor', COMDAT
; _this$ = esi
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, esi
	ret	0
??_GLinkDestInterop@@QAEPAXI@Z ENDP			; LinkDestInterop::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1LinkActionInterop@@QAE@XZ			; LinkActionInterop::~LinkActionInterop
; Function compile flags: /Ogtpy
; File c:\projects\etc\pdflibnet\libafpdflib\linkinterop.cpp
;	COMDAT ??1LinkActionInterop@@QAE@XZ
_TEXT	SEGMENT
??1LinkActionInterop@@QAE@XZ PROC			; LinkActionInterop::~LinkActionInterop, COMDAT
; _this$ = esi

; 114  : 	if(_dest!=0){

	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN1@LinkAction

; 115  : 		delete _dest;

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 116  : 		_dest=0;

	mov	DWORD PTR [esi+12], 0
$LN1@LinkAction:

; 117  : 	}
; 118  : }

	ret	0
??1LinkActionInterop@@QAE@XZ ENDP			; LinkActionInterop::~LinkActionInterop
_TEXT	ENDS
PUBLIC	?getAction@LinkInterop@@QAEPAVLinkActionInterop@@XZ ; LinkInterop::getAction
; Function compile flags: /Ogtpy
;	COMDAT ?getAction@LinkInterop@@QAEPAVLinkActionInterop@@XZ
_TEXT	SEGMENT
?getAction@LinkInterop@@QAEPAVLinkActionInterop@@XZ PROC ; LinkInterop::getAction, COMDAT
; _this$ = ecx

; 55   : LinkActionInterop *LinkInterop::getAction(){

	push	esi
	mov	esi, ecx

; 56   : 	if(_action==0)

	cmp	DWORD PTR [esi+8], 0
	jne	SHORT $LN11@getAction

; 57   : 		_action=new LinkActionInterop(_link,(void *)((Link *)_link)->getAction(),_pdfDoc);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@getAction
	mov	ecx, DWORD PTR [esi]
	mov	edx, DWORD PTR [ecx+32]
	push	edi
	mov	edi, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+8], edi
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+12], 0
	pop	edi
	mov	DWORD PTR [esi+8], eax
	pop	esi

; 59   : }

	ret	0
$LN4@getAction:

; 57   : 		_action=new LinkActionInterop(_link,(void *)((Link *)_link)->getAction(),_pdfDoc);

	xor	eax, eax
	mov	DWORD PTR [esi+8], eax
$LN11@getAction:

; 58   : 	return _action;

	mov	eax, DWORD PTR [esi+8]
	pop	esi

; 59   : }

	ret	0
?getAction@LinkInterop@@QAEPAVLinkActionInterop@@XZ ENDP ; LinkInterop::getAction
_TEXT	ENDS
PUBLIC	?getKind@LinkActionInterop@@QAEHXZ		; LinkActionInterop::getKind
; Function compile flags: /Ogtpy
;	COMDAT ?getKind@LinkActionInterop@@QAEHXZ
_TEXT	SEGMENT
?getKind@LinkActionInterop@@QAEHXZ PROC			; LinkActionInterop::getKind, COMDAT
; _this$ = ecx

; 51   : 	if(((Link *)_link)->getAction()!=0)

	mov	eax, DWORD PTR [ecx]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN1@getKind

; 52   : 		return (int)((LinkAction *)_action)->getKind();

	mov	ecx, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	jmp	eax
$LN1@getKind:

; 53   : 	return 0;

	xor	eax, eax

; 54   : }

	ret	0
?getKind@LinkActionInterop@@QAEHXZ ENDP			; LinkActionInterop::getKind
_TEXT	ENDS
PUBLIC	?gety1@LinkInterop@@QAENXZ			; LinkInterop::gety1
; Function compile flags: /Ogtpy
;	COMDAT ?gety1@LinkInterop@@QAENXZ
_TEXT	SEGMENT
?gety1@LinkInterop@@QAENXZ PROC				; LinkInterop::gety1, COMDAT
; _this$ = ecx

; 40   : 	double x1,x2,y1,y2;
; 41   : 	((Link *)_link)->getRect(&x1,&y1,&x2,&y2);
; 42   : 	return y2;

	mov	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+24]

; 43   : }

	ret	0
?gety1@LinkInterop@@QAENXZ ENDP				; LinkInterop::gety1
_TEXT	ENDS
PUBLIC	?gety0@LinkInterop@@QAENXZ			; LinkInterop::gety0
; Function compile flags: /Ogtpy
;	COMDAT ?gety0@LinkInterop@@QAENXZ
_TEXT	SEGMENT
?gety0@LinkInterop@@QAENXZ PROC				; LinkInterop::gety0, COMDAT
; _this$ = ecx

; 35   : 	double x1,x2,y1,y2;
; 36   : 	((Link *)_link)->getRect(&x1,&y1,&x2,&y2);
; 37   : 	return y1;

	mov	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+8]

; 38   : }

	ret	0
?gety0@LinkInterop@@QAENXZ ENDP				; LinkInterop::gety0
_TEXT	ENDS
PUBLIC	?getx1@LinkInterop@@QAENXZ			; LinkInterop::getx1
; Function compile flags: /Ogtpy
;	COMDAT ?getx1@LinkInterop@@QAENXZ
_TEXT	SEGMENT
?getx1@LinkInterop@@QAENXZ PROC				; LinkInterop::getx1, COMDAT
; _this$ = ecx

; 29   : 	double x1,x2,y1,y2;
; 30   : 	((Link *)_link)->getRect(&x1,&y1,&x2,&y2);
; 31   : 	return x2;

	mov	eax, DWORD PTR [ecx]
	fld	QWORD PTR [eax+16]

; 32   : }

	ret	0
?getx1@LinkInterop@@QAENXZ ENDP				; LinkInterop::getx1
_TEXT	ENDS
PUBLIC	?getx0@LinkInterop@@QAENXZ			; LinkInterop::getx0
; Function compile flags: /Ogtpy
;	COMDAT ?getx0@LinkInterop@@QAENXZ
_TEXT	SEGMENT
?getx0@LinkInterop@@QAENXZ PROC				; LinkInterop::getx0, COMDAT
; _this$ = ecx

; 23   : 	double x1,x2,y1,y2;
; 24   : 	((Link *)_link)->getRect(&x1,&y1,&x2,&y2);

	mov	eax, DWORD PTR [ecx]

; 25   : 	return x1;

	fld	QWORD PTR [eax]

; 26   : }

	ret	0
?getx0@LinkInterop@@QAENXZ ENDP				; LinkInterop::getx0
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??_GLinkActionInterop@@QAEPAXI@Z
_TEXT	SEGMENT
??_GLinkActionInterop@@QAEPAXI@Z PROC			; LinkActionInterop::`scalar deleting destructor', COMDAT
; _this$ = esi
	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN4@scalar@9
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	DWORD PTR [esi+12], 0
$LN4@scalar@9:
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	eax, esi
	ret	0
??_GLinkActionInterop@@QAEPAXI@Z ENDP			; LinkActionInterop::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1LinkInterop@@QAE@XZ				; LinkInterop::~LinkInterop
; Function compile flags: /Ogtpy
;	COMDAT ??1LinkInterop@@QAE@XZ
_TEXT	SEGMENT
??1LinkInterop@@QAE@XZ PROC				; LinkInterop::~LinkInterop, COMDAT
; _this$ = edi

; 14   : {

	push	esi

; 15   : 	_link=0;
; 16   : 	if(_action!=0){

	mov	esi, DWORD PTR [edi+8]
	mov	DWORD PTR [edi], 0
	test	esi, esi
	je	SHORT $LN1@LinkIntero

; 17   : 		delete _action;

	mov	eax, DWORD PTR [esi+12]
	test	eax, eax
	je	SHORT $LN9@LinkIntero
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	DWORD PTR [esi+12], 0
$LN9@LinkIntero:
	push	esi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 18   : 		_action=0;

	mov	DWORD PTR [edi+8], 0
$LN1@LinkIntero:
	pop	esi

; 19   : 	}
; 20   : }

	ret	0
??1LinkInterop@@QAE@XZ ENDP				; LinkInterop::~LinkInterop
PUBLIC	?getURI@LinkActionInterop@@QAEPADXZ		; LinkActionInterop::getURI
; Function compile flags: /Ogtpy
;	COMDAT ?getURI@LinkActionInterop@@QAEPADXZ
_TEXT	SEGMENT
?getURI@LinkActionInterop@@QAEPADXZ PROC		; LinkActionInterop::getURI, COMDAT
; _this$ = ecx

; 91   : char *LinkActionInterop::getURI(){

	push	esi
	mov	esi, ecx

; 92   : 	if(this->getKind() ==LinkActionKind::actionURI){

	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN1@getURI
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	eax, 3
	jne	SHORT $LN1@getURI

; 93   : 		if(((Link *)_link)->isOk() && 
; 94   : 			((LinkURI *)_action)->isOk()){

	mov	ecx, DWORD PTR [esi]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN1@getURI
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	test	eax, eax
	je	SHORT $LN1@getURI

; 95   : 			GString *g=((LinkURI *)_action)->getURI();
; 96   : 			return g->getCString();

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	pop	esi

; 100  : }

	ret	0
$LN1@getURI:

; 97   : 		}
; 98   : 	}
; 99   : 	return '\0';

	xor	eax, eax
	pop	esi

; 100  : }

	ret	0
?getURI@LinkActionInterop@@QAEPADXZ ENDP		; LinkActionInterop::getURI
_TEXT	ENDS
PUBLIC	?getDest@LinkActionInterop@@QAEPAVLinkDestInterop@@XZ ; LinkActionInterop::getDest
; Function compile flags: /Ogtpy
;	COMDAT ?getDest@LinkActionInterop@@QAEPAVLinkDestInterop@@XZ
_TEXT	SEGMENT
?getDest@LinkActionInterop@@QAEPAVLinkDestInterop@@XZ PROC ; LinkActionInterop::getDest, COMDAT
; _this$ = ecx

; 77   : LinkDestInterop *LinkActionInterop::getDest(){

	push	esi
	mov	esi, ecx

; 78   : 	if(this->getKind() == LinkActionKind::actionGoTo){

	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN19@getDest
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	test	eax, eax
	jne	SHORT $LN3@getDest
$LN19@getDest:

; 79   : 		if(((LinkGoTo *)_action)->isOk()){

	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	test	eax, eax
	je	SHORT $LN3@getDest

; 80   : 			if(_dest==0){

	cmp	DWORD PTR [esi+12], 0
	jne	SHORT $LN1@getDest

; 81   : 				LinkDest *dest =((LinkGoTo *)_action)->getDest();

	mov	ecx, DWORD PTR [esi+4]
	push	edi
	mov	edi, DWORD PTR [ecx+4]

; 82   : 				if(dest!=0)

	test	edi, edi
	je	SHORT $LN20@getDest

; 83   : 					_dest=new LinkDestInterop(dest,_pdfDoc);

	push	8
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@getDest
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax], edi
	mov	DWORD PTR [eax+4], ecx
	pop	edi
	mov	DWORD PTR [esi+12], eax
	pop	esi

; 89   : }

	ret	0
$LN7@getDest:

; 83   : 					_dest=new LinkDestInterop(dest,_pdfDoc);

	xor	eax, eax
	mov	DWORD PTR [esi+12], eax
$LN20@getDest:
	pop	edi
$LN1@getDest:

; 84   : 			}
; 85   : 			return  _dest;

	mov	eax, DWORD PTR [esi+12]
	pop	esi

; 89   : }

	ret	0
$LN3@getDest:

; 86   : 		}
; 87   : 	}
; 88   : 	return 0;

	xor	eax, eax
	pop	esi

; 89   : }

	ret	0
?getDest@LinkActionInterop@@QAEPAVLinkDestInterop@@XZ ENDP ; LinkActionInterop::getDest
_TEXT	ENDS
PUBLIC	?getDestName@LinkActionInterop@@QAEPADXZ	; LinkActionInterop::getDestName
; Function compile flags: /Ogtpy
;	COMDAT ?getDestName@LinkActionInterop@@QAEPADXZ
_TEXT	SEGMENT
?getDestName@LinkActionInterop@@QAEPADXZ PROC		; LinkActionInterop::getDestName, COMDAT
; _this$ = ecx

; 61   : char *LinkActionInterop::getDestName(){

	push	esi
	mov	esi, ecx

; 62   : 	if(_link!=0){

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN1@getDestNam

; 63   : 		if(this->getKind()==LinkActionKind::actionGoTo){

	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN18@getDestNam
	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	test	eax, eax
	jne	SHORT $LN1@getDestNam
$LN18@getDestNam:

; 64   : 			if(((Link *)_link)->isOk() 
; 65   : 				&& ((LinkGoTo *)_action)->isOk()){

	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN1@getDestNam
	mov	ecx, DWORD PTR [esi+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	test	eax, eax
	je	SHORT $LN1@getDestNam

; 66   : 
; 67   : 				GString *g=((LinkGoTo *)_action)->getNamedDest();

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [ecx+8]

; 68   : 				if(g!=0)

	test	eax, eax
	je	SHORT $LN1@getDestNam

; 69   : 					return g->getCString();

	mov	eax, DWORD PTR [eax+4]
	pop	esi

; 75   : }

	ret	0
$LN1@getDestNam:

; 70   : 
; 71   : 			}
; 72   : 		}
; 73   : 	}
; 74   : 	return '\0';

	xor	eax, eax
	pop	esi

; 75   : }

	ret	0
?getDestName@LinkActionInterop@@QAEPADXZ ENDP		; LinkActionInterop::getDestName
END
